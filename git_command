mv <old name file> <new name file> - rename;
git status -status;
git add file.name - добавление файла в индекс;
git add . - добавление всех вайлов в индекс;
echo 'text' > name_file - file and text in;
echo 'text' >> name_file - добаление новой строки в файл;
git clean -fd - выполним очистку;
cat INFO.md - read file;
git restore INFO.md  - отменим изменения;
git restore --staged file.name seconFile.name ... - переместим изменения из индекса в рабочую директорию;

example: 
{git restore hexlet.txt
git restore --staged index.md index.html
git restore index.html
git clean -fd}

git rm NEW.md - удаление у добавление файла для комита;
git grep line - показывает список всех выполненных коммитов; 
git log - показывает список всех выполненных коммитов;
git log -p - коммиты с полным дифом;
git show 5120bea - выводится диф между этим коммитом и предыдущим
git blame INFO.md - выводит файл и рядом с каждой строкой показывает того, кто её менял и в каком коммите;
git grep text - совпадение с указанной строкой во всех файлах;
git grep -i text - позволяет искать без учета регистра;
git diff - показывает разницу между тем, что было и что сталож
git diff --staged - Выведет все изменения сделанные в рабочей директории,которые были добавлены в индекс;
git clone - клонирование репозитория;
git revert 5454hash - сводится к созданию ещё одного коммита, который выполняет изменения противоположные тому коммиту, который отменяется;
git reset - отменит коммит, но не удалит его, а поместит все изменения этого коммита в рабочую директорию, так что с ними можно будет продолжить работать;
git reset --hard (HEAD or HEAD2)- полное удаление. HEAD~ означает "один коммит от последнего коммита". Если бы мы хотели удалить два последних коммита, то могли бы написать HEAD~2;



